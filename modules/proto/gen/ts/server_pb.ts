// buf:lint:ignore RPC_REQUEST_STANDARD_NAME

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file server.proto (package veil, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { IceCandidate, SessionDescription } from "./webrtc_pb.js";

/**
 * @generated from message veil.CreateSessionRequest
 */
export class CreateSessionRequest extends Message<CreateSessionRequest> {
  constructor(data?: PartialMessage<CreateSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "veil.CreateSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSessionRequest {
    return new CreateSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSessionRequest {
    return new CreateSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSessionRequest {
    return new CreateSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSessionRequest | PlainMessage<CreateSessionRequest> | undefined, b: CreateSessionRequest | PlainMessage<CreateSessionRequest> | undefined): boolean {
    return proto3.util.equals(CreateSessionRequest, a, b);
  }
}

/**
 * @generated from message veil.CreateSessionResponse
 */
export class CreateSessionResponse extends Message<CreateSessionResponse> {
  /**
   * @generated from field: veil.webrtc.SessionDescription offer = 1;
   */
  offer?: SessionDescription;

  constructor(data?: PartialMessage<CreateSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "veil.CreateSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "offer", kind: "message", T: SessionDescription },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSessionResponse {
    return new CreateSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSessionResponse {
    return new CreateSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSessionResponse {
    return new CreateSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSessionResponse | PlainMessage<CreateSessionResponse> | undefined, b: CreateSessionResponse | PlainMessage<CreateSessionResponse> | undefined): boolean {
    return proto3.util.equals(CreateSessionResponse, a, b);
  }
}

/**
 * @generated from message veil.SetAnswerRequest
 */
export class SetAnswerRequest extends Message<SetAnswerRequest> {
  /**
   * @generated from field: veil.webrtc.SessionDescription answer = 1;
   */
  answer?: SessionDescription;

  constructor(data?: PartialMessage<SetAnswerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "veil.SetAnswerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "answer", kind: "message", T: SessionDescription },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetAnswerRequest {
    return new SetAnswerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetAnswerRequest {
    return new SetAnswerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetAnswerRequest {
    return new SetAnswerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetAnswerRequest | PlainMessage<SetAnswerRequest> | undefined, b: SetAnswerRequest | PlainMessage<SetAnswerRequest> | undefined): boolean {
    return proto3.util.equals(SetAnswerRequest, a, b);
  }
}

/**
 * @generated from message veil.SetAnswerResponse
 */
export class SetAnswerResponse extends Message<SetAnswerResponse> {
  constructor(data?: PartialMessage<SetAnswerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "veil.SetAnswerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetAnswerResponse {
    return new SetAnswerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetAnswerResponse {
    return new SetAnswerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetAnswerResponse {
    return new SetAnswerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetAnswerResponse | PlainMessage<SetAnswerResponse> | undefined, b: SetAnswerResponse | PlainMessage<SetAnswerResponse> | undefined): boolean {
    return proto3.util.equals(SetAnswerResponse, a, b);
  }
}

/**
 * @generated from message veil.RenegotiateRequest
 */
export class RenegotiateRequest extends Message<RenegotiateRequest> {
  /**
   * @generated from field: veil.webrtc.SessionDescription offer = 1;
   */
  offer?: SessionDescription;

  constructor(data?: PartialMessage<RenegotiateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "veil.RenegotiateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "offer", kind: "message", T: SessionDescription },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenegotiateRequest {
    return new RenegotiateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenegotiateRequest {
    return new RenegotiateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenegotiateRequest {
    return new RenegotiateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenegotiateRequest | PlainMessage<RenegotiateRequest> | undefined, b: RenegotiateRequest | PlainMessage<RenegotiateRequest> | undefined): boolean {
    return proto3.util.equals(RenegotiateRequest, a, b);
  }
}

/**
 * @generated from message veil.RenegotiateResponse
 */
export class RenegotiateResponse extends Message<RenegotiateResponse> {
  /**
   * @generated from field: veil.webrtc.SessionDescription answer = 1;
   */
  answer?: SessionDescription;

  constructor(data?: PartialMessage<RenegotiateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "veil.RenegotiateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "answer", kind: "message", T: SessionDescription },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenegotiateResponse {
    return new RenegotiateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenegotiateResponse {
    return new RenegotiateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenegotiateResponse {
    return new RenegotiateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenegotiateResponse | PlainMessage<RenegotiateResponse> | undefined, b: RenegotiateResponse | PlainMessage<RenegotiateResponse> | undefined): boolean {
    return proto3.util.equals(RenegotiateResponse, a, b);
  }
}

/**
 * @generated from message veil.TrickleIceRequest
 */
export class TrickleIceRequest extends Message<TrickleIceRequest> {
  /**
   * @generated from field: veil.webrtc.IceCandidate candidate = 1;
   */
  candidate?: IceCandidate;

  constructor(data?: PartialMessage<TrickleIceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "veil.TrickleIceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "candidate", kind: "message", T: IceCandidate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrickleIceRequest {
    return new TrickleIceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrickleIceRequest {
    return new TrickleIceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrickleIceRequest {
    return new TrickleIceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TrickleIceRequest | PlainMessage<TrickleIceRequest> | undefined, b: TrickleIceRequest | PlainMessage<TrickleIceRequest> | undefined): boolean {
    return proto3.util.equals(TrickleIceRequest, a, b);
  }
}

/**
 * @generated from message veil.TrickleIceResponse
 */
export class TrickleIceResponse extends Message<TrickleIceResponse> {
  /**
   * @generated from field: veil.webrtc.IceCandidate candidate = 1;
   */
  candidate?: IceCandidate;

  constructor(data?: PartialMessage<TrickleIceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "veil.TrickleIceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "candidate", kind: "message", T: IceCandidate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrickleIceResponse {
    return new TrickleIceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrickleIceResponse {
    return new TrickleIceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrickleIceResponse {
    return new TrickleIceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TrickleIceResponse | PlainMessage<TrickleIceResponse> | undefined, b: TrickleIceResponse | PlainMessage<TrickleIceResponse> | undefined): boolean {
    return proto3.util.equals(TrickleIceResponse, a, b);
  }
}

